{
    "contents" : "\n\nrm(list=ls())\nsetwd('h:/Analytics Data/fhsc_skills/SEM1_2014-15')\n\n#install.packages('ggplot2')\nlibrary(ggplot2)\n\nreaddate <- function()\n{ \n  n <- readline(prompt=\"Enter an date as 'dd/mm/yyyy': \")\n  n <- as.POSIXct(n, format=\"%d/%m/%Y\")\n  return(n)\n}\n\n# The following should come in as a parameter when  figure that out\n# it works like this - args <- commandArgs(trailingOnly = TRUE)\n# called by (in path) rscript filename.R args'\n\n# for now input\n\ntDate <- readdate()\n\n# should probably have a start date, but later slice looks only at student activity\ntDate\n\n\n####\n# to start with I want to get a list of student ids from the cohort - I only want those who passed the essay\n# this file has results data for the module\n####\nusers <- read.csv('CMPST_00699 essay data.csv')\nevents <- read.csv('CMPST_00699 events.csv')\n\n### \n# select only columns I have an interest in\n###\nevents <- subset(events, select = c(EVENT_DATE, EID, EVENT))\n\n\n# convert EVENT_DATEs to date format\nevents$EVENT_DATE <- as.POSIXct(as.character(events$EVENT_DATE), format=\"%d/%m/%Y %H:%M\")\nevents <- subset(events, events$EVENT_DATE <= tDate) # take only those lt or eq target date\n\ntail(events)\nhead(events)\n\n\n####\n# get a list of only students who passed\nusers <- subset(users, users$E.MARK > 40, select=c(EID, E.MARK)) # I dont need all of the vectors\nstudentcount<-nrow(users)\n\n# now I have that list I can right join with the events for this course to filter only those students who passed in the list\n# this will also get rid of staff events \nevents <- merge(events, users, by='EID', all.y=T) \nevents <- events[order(events$EVENT_DATE),] # need to reorder on date (asc) after merge\n\n\n\n####\n# I'm not interested in lots of the events - there are so few or meaningless. Subsetting can remove\n####\n\n#events <- subset(events, events$EVENT != 'pres.end') \nevents <- subset(events, events$EVENT != 'messages.delete') \nevents <- subset(events, events$EVENT != 'messages.movedtodeletefolder') \nevents <- subset(events, events$EVENT != 'messages.newfolder') \n#events <- subset(events, events$EVENT != 'msnd.email.send') \nevents <- subset(events, events$EVENT != 'content.new')\nevents <- subset(events, events$EVENT != 'content.available')\n\nevents$EVENT <- factor(events$EVENT)    # refactoring gets rid of empty levels \nevents$EID <- factor(events$EID)        # and ids not used\n\n####\n# I need to rename a number of events for easier reading when plotting later\n####\n\nlevels(events$EVENT)[levels(events$EVENT)==\"asn.read.assignment\"] <- \"Assign.Read\"\nlevels(events$EVENT)[levels(events$EVENT)==\"asn.read.submission\"] <- \"Assign.Results\"\nlevels(events$EVENT)[levels(events$EVENT)==\"melete.section.read\"] <- \"Pathway.Read\"\nlevels(events$EVENT)[levels(events$EVENT)==\"asn.submit.submission\"] <- \"Assign.Submit\"\nlevels(events$EVENT)[levels(events$EVENT)==\"messages.forward\"] <- \"Mess.Forward\"\nlevels(events$EVENT)[levels(events$EVENT)==\"messages.reply\"] <- \"Mess.Reply\"\nlevels(events$EVENT)[levels(events$EVENT)==\"messages.read\"] <- \"Mess.Read\"\nlevels(events$EVENT)[levels(events$EVENT)==\"messages.new\"] <- \"Mess.New\"\nlevels(events$EVENT)[levels(events$EVENT)==\"chat.new\"] <- \"Chat.New\"\nlevels(events$EVENT)[levels(events$EVENT)==\"forums.read\"] <- \"Forum.Read\"\nlevels(events$EVENT)[levels(events$EVENT)==\"forums.response\"] <- \"Forum.Reply\"\nlevels(events$EVENT)[levels(events$EVENT)==\"forums.new\"] <- \"Forum.Post\"\nlevels(events$EVENT)[levels(events$EVENT)==\"content.read\"] <- \"Resource.Read\"\n\n# combine two\n\nlevels(events$EVENT)[levels(events$EVENT)==\"pres.begin\"] <- \"Join site\"\nlevels(events$EVENT)[levels(events$EVENT)==\"site.upd\"] <- \"Join site\"\n\n\n# so now I want to plot overall activity to a given date\n\n# histogram of events dist\nevents$EVENT_DATE <- round(events$EVENT_DATE , \"day\" ) # round dates to just days\n\nfirstDate<-events$EVENT_DATE[1]  # gets the first date in the list\nhead(events)\n\nhBreaks<-as.numeric(difftime(tDate, firstDate , units=\"days\")) # calculates the number of days in the data\nfirstDate\nhead(events)\npar(mar=c(10,9,10,10))   # margins\nhist(events$EVENT_DATE, hBreaks, las=2)\n\n\n# then get count for each day\ndailyCount<- aggregate(events, by = list(as.character(events$EVENT_DATE)), length)\n\n# to get the average per student then divide byy number of students\n\ndailyCount$EVENT <- dailyCount$EVENT / studentcount\n\n\nhead(dailyCount)\nstr(dailyCount)\n\n# dont need these two columns now\ndailyCount$EVENT_DATE <- NULL\ndailyCount$EID <- NULL\n\n##########################\n###\n### should work these out as averages? Or modes or boxplots :)\n###\n##########################\n\npar \n\nggplot(aes(x = Group.1, y = EVENT), data = dailyCount) +\n  geom_point() +\n  geom_point(color='blue') + \n  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n  labs(x = 'Activity', y = 'Date', title='Average activity by date')\n\n\n# dates as factors are not continuous here so I need to define a dummy group for ggplot to\n# allow it to join the points\n\nggplot(aes(x = Group.1, y = EVENT, group=1), data = dailyCount) + \n  geom_line() +\n  geom_line(color='blue') + \n  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n  labs(x = 'Date', y = 'Total activity', title='Activity by date')\n\n\n#######\n# now to pick an individual student and plot their pulse\n#############\n\nmyStudent <- '47169'\n",
    "created" : 1431429025851.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1749056990",
    "id" : "A7769D40",
    "lastKnownWriteTime" : 1431435771,
    "path" : "D:/Data/github/Analytics-ISL-Project/pulse.R",
    "project_path" : "pulse.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}