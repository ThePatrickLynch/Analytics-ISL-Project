{
    "contents" : "# indicates a comment\n# to make command jump to console and execute use CTRL-R\n\n2+2 # product\n\n2 +\n2 # hmm can span lines - odd behaviour\n\n# creating vectors\n\ndrink=scan() # reads in a list of numbers types?\n\nnames<-c('Magnus','Bob','Alex','Lisa','Rosie','John')\n    \t# <- is the same as =\n\t# c is collection\n\t# names is a 'factor'\n\t# beware case sensitive\ndrink=c(2,0,1,1,1,2)\n\n\n# history(n) shows last n commands history(4) \n# CTRL-R can also add only highlighted lines\n\n\nls() # tells you everything in memory\nrm(drink) # remove from memory\nrm(list=ls()) # remove everything\n\ndrink[1] # shows the contents of first item in the list\ndrink[4:6] # 4-6\ndrink[c(4,1,5)] # selecting multiple items\ndrink[6]=3 # set a value \n\n# up arrow skips back though previous commands\n\n# if the response console is '+' it means something is missing in the command\n\n### FILES ###\n\n# will read a range of files\n# csv preferred must add NA when data is not available\n# spaces can turn numbers into factors because it sees txt\n\n# dataset eye\n\neye=read.csv(file.choose())  # dont use a name that matches on of your factors\n\t\t# could put filename/location instead of choose, but file chooser dialog make life easier\n\n# help for a given command e.g. ? read.csv will show the syntax\n\nnames(eye) # tells us the names of all of the columns\n\nstr(eye) # data frame structure - nice overview of the data\n\nsummary(eye) # provides a summary of an object\n\n# really good normal dist would have median and mean the same\n\nhead(eye)    # head and tail show you the top or bottom items in the file\nhead(eye,10)\ntail(eye)\n\n\neye[,c(1,5)]  # gives all rows 1 and 5 column\neye[,c(\"family\",\"water\")] # can use names\neye[c(1:10),c(1,5)] # rows 1-10 columns 1 and 5\neye[c(10:50),] # rows 10-50 all columns\n\neye.nonsense=eye[c(1:10),c(1,5)] # creates a new object from subset\n\t# eye.nonsense is just a name could be just nonsense for example. naming convention shows derivation\n\nwrite.csv(eye.nonsense,\"test.csv\") # writes a csv of the subset to the working directory\n\n# Set the working directory\nsetwd(\"\nC:/Data\")\ngetwd()\n\n### PLOTS ###\n\nboxplot(eye$ed~eye$depthc) \n\nboxplot(eye$ed~eye$depthc, data=eye) # alternate\n\n# or attach\n\nattach(eye)  # adds the object eye to the search path\n            # attach not preferred as you may use same field name in multiple files\n\ndetach(eye)  # removes from search path\n\n\n# more options\n\nboxplot(eye$ed~eye$depthc,main=\"Eye diameter by depth\",xlab=\"Depth class\", ylab=\"Eye diameter (mm)\", col=\"cornsilk1\") \n\n# http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf\n\n\n\nboxplot(eye$ed~eye$depthc,main=\"Eye diameter by depth\",xlab=\"Depth class\", \n        ylab=\"Eye diameter (mm)\", col=c(\"red\",\"blue\",\"yellow\",\"green\")) # list of colours\n\nboxplot(eye$ed~eye$depthc,main=\"Eye diameter by depth\",xlab=\"Depth class\", \n        ylab=\"Eye diameter (mm)\", col=c(\"red\",\"blue\")) # two will alternate\n\n\n\nboxplot(eye$ed~eye$depthc,main=\"Eye diameter by depth\",xlab=\"Depth class\", \n        ylab=\"Eye diameter (mm)\", col=c(\"red\",\"blue\",\"yellow\",\"green\"), border=\"orange\") # list of colours\n\n\n## parametric statistics assume data is normally distributed\n\nqqnorm(eye$ed)  # quantile quantile plot \n\nqqline(eye$ed) # plots a line\n\nqqnorm(log(eye$ed))  # logs make it easier to see relationships\n\nqqline(log(eye$ed))\n\nshapiro.test(eye$ed)  # a low p value says its not normally distributed less than .05\nshapiro.test(log(eye$ed))\n\nhist(eye$ed)  # histogram\n\npar(mfrow=c(1,2)) # separates the graphic window into 2\n                  # next plots will be show 1 row two columns = side by side\n\nhist(eye$ed)  # histogram\nhist(log(eye$ed))  # histogram\n\ntable(eye$habitat) # count of values\n\neye$habitat # shows contents of habitat column\nclass(eye$habitat) # what type of object is that item\nclass(eye) # that object\n\nhabitatn=as.numeric(eye$habitat) # new vector of numeric version separate to rest of data\neye$habitatn=as.numeric(eye$habitat) # adds new column to the data\n\ntab.habitat=table(eye$habitat) # puts data into a table labelled chi.habitat shows count\ntab.habitat # if randomly distributed then each area should be same 28 from those not NA\nsummary(eye$habitat) # will also show NA\n\nchisq.test(tab.habitat) # low value for chi means good random distribution \n# p-value is the probability of random distribution\n\nshrimp.chi=chisq.test(tab.habitat)\nshrimp.chi$exp # expected outcome for random\nsummary(shrimp.chi)\nshrimp.chi$obs # observed\nshrimp.chi$sdev \n\ned.cl=eye$ed/eye$cl #ratio of ed to cl\n\nboxplot(ed.cl~eye$depthc)\n\n\nplot(eye) # scatter plot everything\neye.numeric=eye[c(3,6,8,13,14,15,16)] # lets just get numeric values\nplot(eye.numeric)\n\nplot(eye$cl~eye$ed) # bivariate scatterplot y,x axis\n\n     \n# quick test for normal distribution\nqqnorm(eye$ed)\neye$log.ed=log(eye$ed)\nqqnorm(eye$log.ed)\n\nplot(log(eye$ed), log(eye$cl), pch=17, col=c(\"red\",\"green\")[eye$ds]) # more parameters pch is point characters\n\n# can vary pch and col based on other parameters\n\nplot(log(eye$ed), log(eye$cl), pch=c(17,15,19)[eye$habitat], col=c(\"red\",\"green\")[eye$ds])\n\n# vary size by depth\n\nplot(log(eye$ed), log(eye$cl), pch=c(17,15,19)[eye$habitat], col=c(\"red\",\"green\")[eye$ds], cex=log(eye$depth))\n\n# Useful site www.statmethods.net\n\nmean(eye$ed)\nmedian(eye$ed)\nvar(eye$ed)\nquantile(eye$ed)\nsd(eye$ed)\nstem(eye$ed) #like a histgram, but shows info\n\nhist(eye$ed)\n\n\n#summarising data by factor\n\nagg.ed.by.ds=aggregate(eye$ed, list(eye$ds), mean) # aggregates the mean of values for each factor\ncolnames(agg.ed.by.ds)=c(\"DS\",\"eye_diameter\") # change column names\nbarplot(agg.ed.by.ds$eye_diameter,names.arg=c(\"N\",\"Y\"), col=c(\"Red\",\"Blue\"))\n\n#or\n\nbarplot(agg.ed.by.ds$eye_diameter,names.arg=agg.ed.by.ds$DS, col=c(\"Red\",\"Blue\"))\n\nbarplot(agg.ed.by.ds$eye_diameter,names.arg=c(\"N\",\"Y\"), col=c(\"Red\",\"Blue\"), ylab=\"Mean eye diameter\", xlab=\"Dorsal spot\", ylim=c(0,2))\n\nagg.edbyds.sd=aggregate(eye$ed, list(eye$ds), sd) # aggregate stdev\n\n\n# using arrows to draw error lines????\n\n### HOMEWORK look at text editor sublime\nplot a barplot with error bars\n\n\nlocator(3) # lets you find coordinates on a plot\n\n\n#################################################################\n# Day 2\n#################################################################\n\neye=read.csv(file.choose())\nstr(eye)\nnames(eye)\neye[c(1:5,7)]\nsummary(eye)\neye[c(1:3,7,1),c(1:5)] # first 5 columns, rows 1-3 and 7 and 1\n\nqqnorm(eye$ed)  # graph for normal dist\nlog.ed=log(eye$ed)\nqqnorm(log.ed) # better view for correlation?\nshapiro.test(log.ed) # test for normal distribution\nks.test(log.ed,rnorm(98))   # tests against generated value Kolmogorov-Smirnov test\n                            # 98 is size of sample\n\nset.seed(42)                # random number seed\n\n# rnorm(n,mean=n2,sd=n3) \nmy.normdist=rnorm(n=1000,mean=25,sd=5)   # syntax for rnorm which generates a random normal distribution\nmean(my.normdist)\nsd(my.normdist)\nsummary(my.normdist)\n\nplot(my.normdist)\n\npar(mfrow=c(1,2))  # mfrows is multiple figures in a row\nndist1=rnorm(n=10,mean=25,sd=5)\nqqnorm(ndist1)\nqqline(ndist1)\nndist2=rnorm(n=1000,mean=25,sd=5)\nqqnorm(ndist2)\nqqline(ndist2)\n\nlocator(1)     # find one location on plot\ntext(1.104,23.4,\"b\")   # puts text 'b' at x,y coordinates on current plot\n\nplace=locator(1)\ntext(place,\"here\")\n\nplace=locator(3)\ntext(place,\"here\")\n\n\n# play with loops here\nfor (n in 1:5)\n{\nplace=locator(1)\ntext(place, n)\n#  sqr.squared[n] = sqr[n]^2 # try locate and numbered label\n}\n\n\n\n# stack overflow good site\n\n#### histogram of a normal dist - generated\n\nnorm1=rnorm(n=100,mean=50,sd=10) # gives a random normal distribution\nnorm2=rnorm(100,80,10)\n\nnorm1a=hist(norm1) # creates histogram of rnorm\nnorm2a=hist(norm2)\nplot(norm1a,col=rgb(0,0,1,.25),xlim=c(0,120))      # plots, last rgb part is transparency\nplot(norm2a,col=rgb(0,0,1,.25),xlim=c(0,120)) \n\n\n#on same chart\nplot(norm1a,col=rgb(0,0,1,.25),xlim=c(0,120))\nplot(norm2a,col=rgb(1,0,1,.25),xlim=c(0,120),add=T)   # add=t allows adding to existing plot\n\n# test for match\n\nt.test(norm1,norm2)  # higher the magnitude of t the higher the difference in means, the p-value i how identicle they might be\n                    # uses a non standard t test - a welsh test?\n\n###Bar plots with error bars in 5 minutes\n\n## need to look at markdown stuff\n\nmeans=tapply(eye$ed,eye$ds,mean) # gives the means for with a dorsal spot and those without\nsds=tapply(eye$ed,eye$ds,sd)\n\nb=barplot(means,ylim=c(min(0),max(pretty(means+sds))))   #does it need pretty, no?\n\n#simpler, plus colours and labels\nb=barplot(means,ylim=c(min(0),max(means+sds)),col=c(\"grey\",\"yellow\"),ylab=\"Mean eye diameter (mm)\", xlab=\"Dorsal spot\")\n\n#add error bars\narrows(b,means+sds,b,means-sds,angle=90,code=3)  # b means plotting on this barplot\n\n# or if you only want positive error bars then take out the -sds\narrows(b,means+sds,b,means-0,angle=90,code=3,col=\"red\")\n\nbox(bty=\"l\")  # 'l' not 1  # puts a line along the bottom\n\n####### Histograms\n\nrm(list=ls()) # just clear everything\n\n# lobster database uses 'N/A' as a value this is not the same as 'NA'\n\nlobs=read.csv(file.choose())   \nstr(lobsters)\nnames(lobs)\nhead(lobs,10)\nboxplot(lobs$size~lobs$species) # non normal the boxplot shows nothing useful\n\n# just want lobsters\nattach(lobs)\nlobster=lobs[which(species==\"lobster\"),]  \n# get a bit of info\nclass(lobster) # its a data.frame\nstr(lobster)\nhead(lobster)\n\n# do a histogram\nlh=hist(lobster$size,col=\"grey\",xlab=\"Size (mm)\") # hist of lobsters\n# get info on the histogram\nlh$breaks    # shows breaks = bin size\nlh$counts   # counts in each bin\n\n# sometimes best to switch axes\nlbp=barplot(lh$counts,horiz=TRUE, col=\"grey\", xlim=c(0,1600))\naxis(2,at=lbp,labels=lh$breaks[-1],las=2) # label y axis\n\n# add minimum landing size to plot\nlh=hist(lobster$size,col=\"grey\",xlab=\"Size (mm)\",prob=TRUE)   # prob=TRUE needed as its probability or density (adds up to one) not frequency histogram\nabline(v=87,col=\"red\",lty=1,lwd=2)   # plot a line at 87 vertically on x axis\n\ncurve(dnorm(x,mean=mean(lobster$size),sd=sd(lobster$size)), add=TRUE, lwd=2, lty=1, col=\"blue\")\n\n\n### ***** aside over lunch k means clustering - apparently built in data for flowers\n### ***** lookup rcharts\n\npar(mfrow=c(1,2))\n\n\n### fitted line - will work on any plot\nlh2=hist(lobster$size,col=\"grey\",xlab=\"Size (mm)\") # hist of lobsters\nmy.multiplier=lh2$counts/lh2$density   # this is the height per unit of the chart its a vector because there are lots\nmy.density=density(lobster$size) # this returns a table with x and y values for each bin\nmy.density$y=my.density$y*my.multiplier[1] # multiplies every item in the y vector by the multiplier (we use the first as they are all the same)\n\nlines(my.density,lwd=2,lty=1,col=\"blue\")   ## generates \n\n# changing bin (or breaks) size\n\nlh2$breaks\n\nlh2=hist(lobster$size,breaks=32, col=\"grey\") # sets number of bins = 32 equal sized\n\nmy.multiplier=lh2$counts/lh2$density   # this is the height per unit of the chart its a vector because there are lots\nmy.density=density(lobster$size) # this returns a table with x and y values for each bin\nmy.density$y=my.density$y*my.multiplier[1] #multiplies every item in the y vector by the multiplier (we use the first as they are all the same)\n\nlines(my.density,lwd=2,lty=1,col=\"blue\")   \n\n##### next thing\ncpue=read.csv(file.choose())   # catch per unit of effort (per pot)\nstr(cpue)\nhead(cpue)\nstr(cpue)\n\nbarplot(cpue$lobcpue,names.arg=sort(cpue$site),las=2, ylim=c(0.0,5.0)) # names.arg addslabels. LAS makes the labels vertical\n\nbarplot(cpue$loblpue,ylim=c(0.0,5.0), col=\"black\", yaxt=\"n\") #y axis title is blank\n\n# plot them together to show cpue versus landing pue\nbarplot(cpue$lobcpue,names.arg=sort(cpue$site),las=2, ylim=c(0.0,5.0)) \n\npar(new=TRUE)\nbarplot(cpue$loblpue,ylim=c(0.0,5.0), col=\"black\", yaxt=\"n\", add=TRUE)\n # could use locator(1)\nlegend(\"topright\",legend=c(\"CPUE\",\"LPUE\"),fill=c(\"grey\",\"black\"))\nabline(h=0)  # same as \n              # box(bty=\"l\")  # 'l' not 1  # puts a line along the bottom\n\n### can i write an lti connector to a page for students?\n\n## magnus advises exploring par more for setting up plotting\n\n#################################### next ########################\n### t-tests and stuff? ###\n\neye=read.csv(file.choose())\n\nboxplot(eye$ed~eye$ds)   # eye diameter of animals that has a ds and those that don't\nboxplot(ed~ds, data=eye) # is same as above\n\neye$loged=log(eye$ed)\nboxplot(eye$loged~eye$ds)\n\n# t.test will tell us if these are significantly different\nt.test(eye$loged~eye$ds)\n# t.tests good for small upto say 30\n# paired t-test is good for before and after experiment test\n\n# for parametric statistics normally dist data and variances equal - so should test variancies and normality\nvar.test(eye$loged~eye$ds)\n\n## read Field - pschologist? Books on R\n\n\n\n##### installing packages\n# menu Packages, install package\n# using needs\nlibrary(lawstat)\n\n\n# remove.packages(\"car\",\"C:/Users/pdspl/Documents/R/win-library/3.1\") # to unistall\n\n\n? levene.test # came in from lawstat so now can get help\n\nlevene.test(loged$ds, data=eye)\n\n## murray logan book good for teaching\n## Andy Fields \n\nlibrary(ggplot2) ### just seeing what else\n\n### linear models\neye$loged=log(eye$ed)\neye$logcl=log(eye$cl)\n\npar(mfrow=c(1,2))\nboxplot(loged~ds,data=eye,ylab=\"Eye diameter\", xlab=\"presence of DS\")\nplot(loged~logcl,data=eye,xlab=\"Carapace length\", ylab=\"Eye diameter\") \n\n\n### from here not right ,,,,,\n\n## is there a difference in eye size based on carapace length and wether they has a ds or not\nplot(loged~logcl,data=eye,xlab=\"Carapace length\", ylab=\"Eye diameter\",pch=as.numeric(eye$ds), col=as.numeric(unique(eye$ds)) \n    # pch makes different shape point for ds and not ds\n    # needs to be numeric\n\nlegend(\"topleft\", inset=0.05,legend=c(\"No\",\"Yes\"),pch=c(1,2), col=c(1,2))  # inset tidies a bit\n\n## need to look again at the above it is wrong ,,,,,,\n\n\n###linear model - bivariate model\n\nedcl.lm=lm(loged~logcl, data=eye)  # lm=linear model\nsummary(edcl.lm)   # the closer th r squared value is to 1 the stronger the relationship. \n                    # 1 is perfect, 0 is random.  \n                    # F-statistic needs to be high for a good model. df high means a better model\n                    # p-value has to be less than 0.05\n\nabline(edcl.lm)  # adds a parametric line of best fit\n\n## which points biggest influence of the line?\npar(mfrow=c(2,2))\nplot(edcl.lm)\n## need to understand what these mean\n\nedclds.lm1=aov(loged~ds+logcl, data=eye)   # two way anova\nsummary(edclds.lm1)  # so we see a relationship between ds and ed and cl and ed, but not looking at the three together\n\nedclds.lm2=aov(loged~ds*logcl, data=eye)   # two way anova with interaction\nsummary(edclds.lm2)  # ds:logc1>0.05 so not significant\n\nanova(edclds.lm1,edclds.lm2)  # so pr 0.06267 (>0.05) means no significant difference between models\n\n# dont understand above\n\n# three pages on eBridge needs reading tonight\n\n\n###########################################################\n#            Radial plots                                 #\n###########################################################\n\n### this is the fun bit apparently !!! Radial plots\nrm(list=ls())\nneph=read.csv(file.choose())\n\nstr(neph)\n## using radial which is in package called plottrix\nlibrary(plotrix)\nradial.plot(neph$distance, neph$rads,rp.type=\"s\", point.symbol=20, start=0, point.col=\"grey\")\n## can tidy up and add features\nradial.plot(neph$distance, neph$rads,rp.type=\"s\", point.symbol=20,\n            start=0, point.col=\"grey\", show.radial.grid=TRUE, \n            radial.lim=c(0,30), radial.labels=\"\", labels=\"\")\n\nfem=neph[which(neph$sex==\"female\"),]\nmale=neph[which(neph$sex==\"male\"),]\nnon1=neph[which(neph$remarks==\"empty burrow\"),]\nnon2=neph[which(neph$sex==\"untagged\"),]\n\nradial.plot(neph$distance, neph$rads,rp.type=\"s\", point.symbol=3, \n            cex=2, start=0, point.col=\"black\", add=TRUE, show.grid=TRUE, radial.lim=c(0,30))\n\nradial.plot(fem$distance, fem$rads,rp.type=\"s\", point.symbol=16, \n            cex=2, start=0, point.col=\"pink\", add=TRUE, show.grid=TRUE, radial.lim=c(0,30))\n\nradial.plot(male$distance, male$rads,rp.type=\"s\", point.symbol=16, \n            cex=2, start=0, point.col=\"blue\", add=TRUE, show.grid=TRUE, radial.lim=c(0,30))\n\nradial.plot(non2$distance, non2$rads,rp.type=\"s\", point.symbol=20, \n            cex=2, start=0, point.col=\"green\", add=TRUE, show.grid=TRUE, radial.lim=c(0,30))\n\nradial.plot(non1$distance, non1$rads,rp.type=\"s\", point.symbol=20, \n            cex=2, start=0, point.col=\"grey\", add=TRUE, show.grid=TRUE, radial.lim=c(0,30))\n\n########################################################\n#                       Day 3                          #\n########################################################\n\nrm(list=ls())\nfish=read.csv(file.choose())\nstr(fish)\nhead(fish)\nnames(fish)\n\n# what factors control the number of species of fish in a country?\n\nsummary(fish$fishno)\n\n#need car package\n\nlibrary(car)\n\n#  [1] \"country\"       \"landarea\"      \"fwarea\"  freashwater      \"coastline\"     \"mpaarea\"  marine protected area     \"mpano\"   mpa number      \"lat\"           \"long\"         \n# [9] \"fishno\"    total fish    \"fishfw\"    fish fresh water    \"fishsw\"        \"fishingtro\"    \"fishend\"       \"fishthreat\"    \"fishreef\"   fidh on reefs   \"percend\"     endemic \n# [17] \"percthr\"  threatened     \"percint\"    introduced   \"comfish\"       \"fishemp\"       \"ssfish\"        \"greywatfoot\"   \"hdi\"           \"popdens\"      \n# [25] \"rain\"          \"percmpa\"       \"freshwithdraw\" \"envscipapers\" \n\n\n# what things might account for fish numbers?\nfish.num=fish[c(9,2,3,4,5,6,7,8,22,23,24)]  # picks out sensible fields to look at\nplot(fish.num) # quick look at all - doesnt show anything obvious\n\nscatterplotMatrix(fish.num)\n\nscatterplotMatrix(fish.num,diag=\"boxplot\")\n\n# lets just plot two bigger\npar(mfrow=c(2,2))\nboxplot(fish.num$fishno,main=\"Fish no\", col=\"blue\")\nboxplot(fish.num$lat,main=\"Lat\", col=\"blue\")\nboxplot(fish.num$coastline,main=\"Coastline\", col=\"blue\")\nboxplot(fish.num$hdi,main=\"Hdi\", col=\"blue\")\n\n\n# boxplot - median line middle, box either side equal ish, tails same sort of length then is normal\n# non normal need log'ing to normalise\n\nfish.num$landarea=log(fish.num$landarea)\nfish.num$fishno=log(fish.num$fishno)\nfish.num$fwarea=log(fish.num$fwarea+0.2)\nfish.num$coastline=log(fish.num$coastline+0.1)\nfish.num$mpaarea=log(fish.num$mpaarea)\nfish.num$greywatfoot=log(fish.num$greywatfoot+0.01)  # has some zeroes so needs shifting as log cant use 0 - could be problematic if predicting\nfish.num$popdens=log(fish.num$popdens)\nfish.num$mpano=log(fish.num$mpano)\n\nscatterplotMatrix(fish.num,diag=\"boxplot\")\n\n## helps us see where two factors have a relationship which shouldn't be used coastline is related to mpano. no point using both\n## y is fishno and we dont want any of the others to be correlated\n# testing for correlation\n\n# pearson non parametric\n? cor\n\ncor(fish.num,use=\"complete.obs\")\n\n# looking for a high coreelation coeffient value in the resultany near 1 or -1 we dont want\n# magnus suggest anything over .5\n\n\ncor(fish.num[-1],use=\"complete.obs\") # takes out first column\n# OR\ncor(fish.num[-c(1,3,5,6)],use=\"complete.obs\") # get rid of x plus the \n\n## now we know how the data needs cleaning data is cleaner we can recreate from scratch\n\nfish.num2=fish[c(9,4,7,8,22,23,24)]\n\n# could do this in a loop\n\nfish.num2$coastline=log(fish.num2$coastline+0.1)\nfish.num2$greywatfoot=log(fish.num$greywatfoot+0.01)  # has some zeroes so needs shifting as log cant use 0 - could be problematic if predicting\nfish.num2$popdens=log(fish.num$popdens)\nfish.num2$fishno=log(fish.num$fishno)\n\nscatterplotMatrix(fish.num2,diag=\"boxplot\")\n\nfish.num3=fish.num2[complete.cases(fish.num2*0),,drop=FALSE] # get rid of incomplete records  \n#     - THIS LINE IS WRONG CHECK MAGNUSSES - concerned if we need to redo logs or not\n\nsummary(fish.num3)\n\nfish.num.lm1=lm(fishno~coastline+lat+long+greywatfoot+hdi+popdens,data=fish.num3) # linear model\nsummary(fish.num.lm1) # results show very small values for lat and coastline therefore they are important as hdi is picked out\n## 3 stars less than .001\n\n# wondering if absolute latitude as opposed to north/south +/- might make a difference\nfish.num3$lata=abs(fish.num3$lat)\nfish.num.lm2=lm2(fishno~coastline+long+greywatfoot+hdi+popdens+lata,data=fish.num3)\nsummary(fish.num.lm2)\n\n#what if we do same with long\n#fish.num3$longa=abs(fish.num3$long)\n#fish.num.lm2=lm(fishno~coastline+long+greywatfoot+hdi+popdens+lata+longa,data=fish.num3)\n#summary(fish.num.lm2)\n\n## latitude and coastline best describe the number of fish species in an area\n# changes affect other results so losing least intersting\n\nfish.num.lm3=lm(fishno~coastline+greywatfoot+hdi+popdens+lata,data=fish.num3)\nsummary(fish.num.lm3)\n\nstep(fish.num.lm3,direction = \"backward\")\n# lowest aic number is best model fishno ~ coastline + lata  --  this may change when line further up works properly\n\n\n#compare models\nanova(fish.num.lm1,fish.num.lm2,fish.num.lm3)  # lowest p-value is best\nplot(fish.num.lm2)\n\ninfluence.measures(fish.num.lm2) # identifies values that are influencing the model - go look\n\n#####################################\n# Maps\n#####################################\n\nrm(list=ls())\n\n# load packages ggmap, mapproj, rworldmap, rworldxtra\nlibrary(ggmap)\nlibrary(mapproj)\nlibrary(rworldmap)\nlibrary(rworldxtra)\n\nmap1=get_map(location=\"YO113AZ\", zoom=17, maptype=\"satellite\") # can add ,city, country or postcode or lat,long\nggmap(map1)\n\nfleet=read.csv(file.choose())   #cpue file\n\nnewmap=getMap(resolution=\"high\") # world map\nplot(newmap)\n\nUK.limits=geocode(c(\"Shetland\",\"Isles of Scilly\",\"Rockall\",\"Lowestoft\"))  # calculating map limits, can use usual google refs\nUK.limits  # shows limits\nplot(newmap, xlim=range(UK.limits$lon),ylim=range(UK.limits$lat))\n\nholderness=geocode(c(\"53.614902N,0.212588W\",\n                     \"54.095777N,0.508468W\",\n                     \"53.614902N,0.23586E\", \n                     \"54.095777N,0.23586W\"))\n\nplot(newmap, xlim=range(holderness$lon),ylim=range(holderness$lat))\n\npoints(fleet$lon,fleet$lat,col=\"red\",cex=as.numeric(fleet$lobcpue), pch=20)\npoints(fleet$lon,fleet$lat,col=as.numeric(fleet$soak),cex=as.numeric(fleet$lobcpue), pch=20)\n\n# add a text\nbrid=locator(1)  # pick a point\ntext(brid,\"Bridlington\")\n\n## european health authority have a good site for dos and donts for charts\n\n## neural network in r?\n\n\n####################\n# confidence levels - clustering\n####################\n\n#fishcoast=subset(fish$coastline>0, select=c(\"fishno\",\"coastline\"))\n#log.fishno=log(fishcoast$fishno)\n#log.coastline=log(fishcoast$coastline)\n\n# magnus will do a couple of videos covering this bit # out of time due to crash\n# euclian distance between samples\n\n\n\n\n",
    "created" : 1427143574508.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1371528510",
    "id" : "8161606D",
    "lastKnownWriteTime" : 1427140908,
    "path" : "E:/data/GitHub/Analytics-ISL-Project/My notes.R",
    "project_path" : "My notes.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}